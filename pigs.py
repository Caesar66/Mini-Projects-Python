# -*- coding: utf-8 -*-
"""Pigs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cVw-nVL69smSKVaR2JpWSGsMtnAORlk8
"""

import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import random

PIGS = {'white':15/101, 'black':15/101, 'flower':7/101, 'pink':15/101, 'tiger':16/101, 'q_mark':7/101, 'mushroom':7/101, 'star':7/101, 'silver':9/101, 'gold':3/101}
TIMER_RUN = {'min': 19, 'sec': 56}
PIG_TRIES = 92

#timer_round = {'min':2, 'sec':10}
#timer_pig = 13
def simulation(pigs, timer_run, pig_tries):
	timer_count = {'days':0, 'hour':0, 'min':0, 'sec':0}
	run_tries = 0
	while(True):
		run_tries += 1
		pigs_run = random.choices(list(pigs.keys()), weights=list(pigs.values()), k=pig_tries)
		timer_count = sumTimer(timer_count, timer_run)
		golden_pigs = pigs_run.count("gold")
		if(golden_pigs >= 5):
			#print(pigs_run, golden_pigs)
			break
	return [timer_count, run_tries]

def sumTimer(actual_timer, timer_add):
	actual_timer['sec'] += timer_add['sec']
	actual_timer['min'] += timer_add['min']
	if(actual_timer['sec'] >= 60):
		actual_timer['sec'] -= 60
		actual_timer['min'] += 1
	if(actual_timer['min'] >= 60):
		actual_timer['min'] -= 60
		actual_timer['hour'] += 1
	if(actual_timer['hour'] >= 24):
		actual_timer['hour'] -= 24
		actual_timer['days'] += 1
	return actual_timer

def getTime(timer):
  return sum([timer['days']*24*60*60, timer['hour']*60*60, timer['min']*60, timer['sec']])

def main():
  iter = 10000
  time_results = []
  runs_results = []
  for i in range(iter):
    s = simulation(PIGS, TIMER_RUN, PIG_TRIES)
    time_results.append(getTime(s[0]))
    runs_results.append(s[1])
  #sns.set_style('whitegrid')
  #sns.kdeplot(np.array(time_results))
  #sns.set_style('whitegrid')

  p = sns.kdeplot(np.array(runs_results))
  plt.xlabel("Tentativas")
  plt.ylabel("Densidade")

  kde_curve = p.lines[0]
  x = kde_curve.get_xdata()
  y = kde_curve.get_ydata()
  halfmax = y.max() / 2
  maxpos = y.argmax()
  leftpos = (np.abs(y[:maxpos] - halfmax)).argmin()
  rightpos = (np.abs(y[maxpos:] - halfmax)).argmin() + maxpos
  fwahm = x[rightpos] - x[leftpos]
  p.hlines(halfmax, x[leftpos], x[rightpos], color='crimson', ls=':')
  p.vlines()
  p.text(x[maxpos], halfmax, f'{fwahm:.3f}\n', color='crimson', ha='center', va='center')
  p.set_ylim(ymin=0)
  plt.show()
main()

x = random.choices(list(range(1,11)), k=100)
y = list(range(1,101))
sns.set_style('whitegrid')
sns.kdeplot(np.array(x))